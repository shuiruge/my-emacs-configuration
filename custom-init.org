#+TITLE: My GNU Emacs Configuration

* About

Emacs is an extensible computing environment that I use mainly for its text editing and scheduling features.

* Package management

** MELPA

Initialize the package system.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/melpa/"))
  (setq package-archive-priorities '(("melpa"  . 100)
                                     ("gnu"    .  50)
                                     ("nongnu" .  25)))
  (package-initialize)
#+end_src

** Use-package

The ~use-package~ macro allows you to isolate package configuration in your ~.emacs~ file in a way that is both performance-oriented and, well, tidy.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package use-package
    :init
    (setq use-package-always-ensure t)
    (use-package use-package-ensure-system-package
      :ensure t))
#+end_src

** Quelpa

Build and install your Emacs Lisp packages on-the-fly and directly from source.

#+begin_src emacs-lisp
  (use-package quelpa)
#+end_src

* General configuration
** Better defaults

Override some of the defaults.

#+begin_src emacs-lisp
  (setq-default
    inhibit-startup-screen t             ; Disable the startup screen
    initial-scratch-message nil          ; Empty the initial *scratch* buffer
    indent-tabs-mode nil                 ; Insert space characters instead of tabs
    tab-width 2                          ; The number of spaces a tab is equal to
    fill-column 78                       ; Line length above which to break a line
    cursor-type 'bar                     ; Display the cursor as a vertical bar
    column-number-mode t                 ; Display the column number in the mode line
    vc-follow-symlinks t                 ; Follow symlinks without requesting confirmation
    major-mode 'text-mode                ; Set the default major mode to text-mode
    ring-bell-function 'ignore           ; Disable the error beep sound
    inhibit-compacting-font-caches nil)  ; Prevent compacting font caches during garbage collection
  (savehist-mode t)                      ; Save the minibuffer history
  (show-paren-mode t)                    ; Enable visualization of matching parens
  (save-place-mode t)                    ; Jump to the last known position when reopening a file
  (electric-pair-mode t)                 ; Enable automatic brackets pairing
  (global-hl-line-mode t)                ; Enable line highlighting in all buffers
  (delete-selection-mode t)              ; Replace selected text when typing
  (global-auto-revert-mode t)            ; Automatically reload externally modified files
  (fset 'yes-or-no-p 'y-or-n-p)          ; Replace "yes/no" prompts with "y/n"
  (prefer-coding-system 'utf-8)          ; Set default encoding to UTF-8
  (set-language-environment 'utf-8)      ; Set default language environment to UTF-8
  (tool-bar-mode 0)                      ; Hide tool bar.
  (global-visual-line-mode t)            ; Word wrap.
#+end_src

File-related customizations.

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :custom
    (auto-save-default nil)             ; Stop creating #autosave# files
    (mode-require-final-newline nil)    ; Don't add newlines at the end of files
    (large-file-warning-threshold nil)) ; Open large files without requesting confirmation
#+end_src

Enable line numbering.

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :hook ((text-mode prog-mode conf-mode) . display-line-numbers-mode))
#+end_src

Improve the default scrolling behavior.

#+begin_src emacs-lisp
  (use-package mwheel
    :ensure nil
    :custom
    (mouse-wheel-scroll-amount '(1 ((shift) . 1)))
    (mouse-wheel-progressive-speed nil)
    (mouse-wheel-follow-mouse 't)
    :config
    (setq scroll-step 1)
    (setq scroll-conservatively 1000))
#+end_src

Fonts and text size.

#+begin_src emacs-lisp
  ;; Default
  (set-face-attribute 'default nil :family "Source Code Pro" :height 140)
#+end_src

** Evil

Emacs + Vim = Evil

#+begin_src emacs-lisp
  ;; Download Evil
  (unless (package-installed-p 'evil)
    (package-install 'evil))
  ;; Enable Evil
  (require 'evil)
  (evil-mode 1)
#+end_src

Custom escape for evil. Reference: https://www.emacswiki.org/emacs/Evil#h5o-16

#+begin_src emacs-lisp
  (defun escape-all ()
    (interactive)
    "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
    (cond
     ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
     ;; Key Lookup will use it.
     ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
     ;; This is the best way I could infer for now to have C-c work during evil-read-key.
     ;; Note: As long as I return [escape] in normal-state, I don't need this.
     ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
     (t (kbd "C-g"))))
#+end_src

TODO.

** Key chord

Trigger command by typing multiple keys simutanously.

#+begin_src emacs-lisp
  (use-package key-chord)
  (key-chord-mode 1)
#+end_src

Basic configurations.

#+begin_src emacs-lisp
  ;; Max time delay between two key presses to be considered a key chord
  (setq key-chord-two-keys-delay 0.05) ; default 0.1
  ;; Max time delay between two presses of the same key to be considered a key chord.
  ;; Should normally be a little longer than `key-chord-two-keys-delay'.
  (setq key-chord-one-key-delay 0.01) ; default 0.2
#+end_src

** Spell checking

Configure the spell checker for multiple languages.

Dependencies:

- ~sudo dnf install hunspell~
- ~sudo dnf install hunspell-en-US hunspell-hu hunspell-ro~

#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :custom
    (ispell-program-name "hunspell")
    ;; English (US), Hungarian, and Romanian
    (ispell-dictionary "en_US")
    :config
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US"))
#+end_src

Add key chord for spell-checking.

#+begin_src emacs-lisp
  (key-chord-define-global "sc"     'ispell-buffer)  ; spell-check.
#+end_src

* Packages
** Color schemes
*** Zenburn

Zenburn is a dark theme.

#+begin_src emacs-lisp
  (use-package zenburn-theme)
#+end_src

*** Solo-Jazz

Solo-jazz is a light theme.

#+begin_src emacs-lisp
  (use-package solo-jazz-theme)
#+end_src

Use light theme by default.

#+begin_src emacs-lisp
  (load-theme 'solo-jazz t)
#+end_src

** General enhancements

*** Eshell

Add key chords.

#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook 
            (lambda () (key-chord-define eshell-mode-map "fj" 'eshell-send-input)))
#+end_src

*** Translation

Go-translate is a powerful translator on Emacs. Supports multiple translation engines such as Google, Bing, deepL.

#+begin_src emacs-lisp
  (use-package go-translate)
#+end_src

Configuration.

#+begin_src emacs-lisp
  (setq gts-translate-list '(("en" "zh")))
  (setq gts-default-translator
        (gts-translator
         :picker (gts-prompt-picker)
         :engines (list (gts-bing-engine))
         :render (gts-buffer-render)))
#+end_src

Key chord for go-translate

#+begin_src emacs-lisp
  (key-chord-define-global "tl"     'gts-do-translate)
#+end_src

*** Avy

Avy provides an interface to quickly jump to any visible position in a buffer.

#+begin_src emacs-lisp
  (use-package avy
    :bind ("M-s" . avy-goto-char))
#+end_src

*** Auto-complete

Auto completion with popup menu.

#+begin_src emacs-lisp
  (use-package auto-complete)
#+end_src

Enable by default.

#+begin_src emacs-lisp
  (ac-config-default)
#+end_src

*** Dashboard

Dashboard is an extensible Emacs startup screen.

#+begin_src emacs-lisp
  (use-package dashboard
    :after all-the-icons
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-items '((recents  . 5)
                       (projects . 5)
                       (agenda   . 5)))
    (dashboard-set-footer nil)
    (dashboard-set-init-info t)
    (dashboard-center-content t)
    (dashboard-set-file-icons t)
    (dashboard-set-heading-icons t)
    (dashboard-startup-banner 'logo))
#+end_src

*** Dired

Dired provides a convenient way to manage files and directories inside Emacs.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :after all-the-icons-dired
    :bind ("C-x C-j"  . dired-jump)
    :hook (dired-mode . all-the-icons-dired-mode)
    :custom
    (dired-auto-revert-buffer t)
    (dired-listing-switches "-agho --group-directories-first"))

  (use-package dired-narrow
    :after dired
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<backtab>" . dired-subtree-cycle)
                ("<tab>"     . dired-subtree-toggle)))

  (use-package all-the-icons-dired
    :after all-the-icons)
#+end_src

*** Doom modeline

Doom modeline is a modeline for GNU Emacs inspired by the Doom theme collection.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :after all-the-icons
    :init
    (doom-modeline-mode)
    :custom
    (doom-modeline-mu4e t)
    (doom-modeline-height 38))
#+end_src

*** Duplicate thing

A package to duplicate current line and selection.

#+begin_src emacs-lisp
  (use-package duplicate-thing
    :preface
    (defun king/duplicate-thing-custom ()
      (interactive)
      (save-mark-and-excursion (duplicate-thing 1))
      (next-line))
    :bind ("C-S-d" . king/duplicate-thing-custom))
#+end_src

*** Editorconfig

EditorConfig helps developers define consistent coding styles across various editors and IDEs.

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer t
    :init
    (editorconfig-mode))
#+end_src

*** Emmet

Emmet is a web-developer's toolkit.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((web-mode css-mode) . emmet-mode))
#+end_src

*** Exec path

Exec path helps ensure that environment variables inside Emacs look the same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-arguments nil)
    :config
    (exec-path-from-shell-initialize))
#+end_src

*** Expand region

Expand region expands the selected region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

*** Helpful

Helpful improves the built-in Emacs help system by providing more contextual information.

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-key]      . helpful-key)
    ([remap describe-command]  . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-function] . helpful-callable))
#+end_src

*** Ibuffer

Ibuffer is a built-in replacement for ~list-buffers~.

#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :hook (ibuffer . (lambda ()
                       (ibuffer-projectile-set-filter-groups)
                       (unless (eq ibuffer-sorting-mode 'alphabetic)
                         (ibuffer-do-sort-by-alphabetic)))))

  (use-package all-the-icons-ibuffer
    :after (all-the-icons ibuffer)
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

*** Icons

A library for inserting developer icons.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :config
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t))
    (setq all-the-icons-scale-factor 1))
#+end_src

*** Indent guides

Highlight the indentation level in Emacs buffers.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-method 'character))
#+end_src

*** Magit

Magit is a Git interface for Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src

*** Move text

A package to move current line or region.

#+begin_src emacs-lisp
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config
    (move-text-default-bindings))
#+end_src

*** Nov

A feature-rich EPUB reading mode for Emacs.

NOTE: ~unzip~ is prerequisite.

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width t))
#+end_src

*** Olivetti

Olivetti is a package designed to create a distraction-free writing environment.

#+begin_src emacs-lisp
  (use-package olivetti
    :hook ((org-mode          . olivetti-mode)
           (nov-mode          . olivetti-mode)
           (markdown-mode     . olivetti-mode)
           (mu4e-view-mode    . olivetti-mode)
           (elfeed-show-mode  . olivetti-mode)
           (mu4e-compose-mode . olivetti-mode))
    :custom
    (olivetti-body-width 100))
#+end_src

*** Projectile

Projectile is a project interaction library for Emacs.

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode)
    :bind ("C-c p" . projectile-command-map))
#+end_src

*** Rainbow delimiters

Rainbow delimiters highlights delimiters such as parentheses, brackets or braces according to their depth.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Rainbow mode

Rainbow mode colorizes strings that represent color names or hex color values.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src

*** Super save

Super save automatically saves buffers when switching to a different application.

#+begin_src emacs-lisp
  (use-package super-save
    :defer t
    :init
    (super-save-mode)
    :custom
    (super-save-exclude '("private.org"))
    ;; Disable auto-saving for remote files
    (super-save-remote-files nil))
#+end_src

*** Try

Try is a package that allows to try out Emacs packages without installing them.

#+begin_src emacs-lisp
  (use-package try
    :defer t)
#+end_src

*** Vertico

Vertico helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices.

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))

  (use-package vertico-directory
    :ensure nil
    :after vertico
    :bind (:map vertico-map
                ("RET"   . vertico-directory-enter)
                ("DEL"   . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package marginalia
    :init
    (marginalia-mode)
    :custom
    (marginalia-align 'right))

  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :init
    (all-the-icons-completion-mode))

  (use-package consult
    :bind (("C-s"   . consult-line)
           ("C-x b" . consult-buffer)))
#+end_src

*** Web mode

Major mode for editing web templates.

#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.html\\'"
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-enable-css-colorization t)
    (web-mode-enable-auto-closing t)
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-current-element-highlight t))
#+end_src

*** Which key

An Emacs package that displays available keybindings in a panel. For example, if you enter ~CTRL-x~ and wait for a second, the panel will expand with all of the available key bindings that follow ~CTRL-x~.

#+begin_src emacs-lisp
  (use-package which-key
    :defer t
    :init
    (which-key-mode)
    :custom
    (which-key-idle-delay 1))
#+end_src

** Languages

*** Markdown

Major mode for editing Markdown files.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :init
    (setq markdown-command "multimarkdown")
    :hook (markdown-mode . (lambda () (display-line-numbers-mode -1)))
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+end_src

*** Python

Major mode for editing Python files.

#+begin_src emacs-lisp
  (use-package python-mode
    :mode "\\.py\\'")
#+end_src

Add key chords for Python (c.f. https://stackoverflow.com/a/23263217/1218716).

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 
            (lambda () (key-chord-define python-mode-map "rp" 'run-python)))
  (add-hook 'python-mode-hook 
            (lambda () (key-chord-define python-mode-map "sb" 'python-shell-send-buffer)))
  (add-hook 'python-mode-hook 
            (lambda () (key-chord-define python-mode-map "sr" 'python-shell-send-region)))
  (add-hook 'python-mode-hook 
            (lambda () (key-chord-define python-mode-map "sp" 'python-shell-send-statement)))
#+end_src

*** Haskell

Major mode for editing Haskell files.

#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+end_src

*** Agda

Running ~agda-mode setup~ in terminal will add the following code in the dot-emacs file.

#+begin_src emacs-lisp
  (load-file (let ((coding-system-for-read 'utf-8))
                  (shell-command-to-string "agda-mode locate")))
#+end_src

Auto-load ~agda2-mode~ for ~.agda~ and ~.lagda.md~. CAUTION: Because of extension confliction with markdown, this section shall be after the "Markdown" section.

#+begin_src emacs-lisp
  (setq auto-mode-alist
     (append
       '(("\\.agda\\'" . agda2-mode)
         ("\\.lagda.md\\'" . agda2-mode))
       auto-mode-alist))
#+end_src

Input unicode. TODO: Hook won't work!

#+begin_src emacs-lisp
  (add-hook 'agda2-mode-hook
     (lambda () (set-input-method "Agda")))
#+end_src

*** HTML

Automatically rename paired HTML/XML tag.

#+begin_src emacs-lisp
  (use-package auto-rename-tag
    :hook (web-mode . auto-rename-tag-mode))
#+end_src

*** JavaScript

Improved JavaScript editing mode.

#+begin_src emacs-lisp
  (use-package js2-mode
    :mode "\\.jsx?\\'")
#+end_src

*** JSON

Major mode for editing JSON files.

#+begin_src emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'"
    :preface
    (defun king/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))
    :hook (before-save . king/json-mode-before-save-hook))
#+end_src

* Custom key bindings

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))               ; Disable C-z
  (global-set-key (kbd "C-;") 'comment-line)   ; Bind C-; to comment-line
  (global-set-key (kbd "M-o") 'other-window)   ; Bind M-o to other-window
  (global-set-key (kbd "M-z") 'zap-up-to-char) ; Bind M-z to zap-up-to-char instead of zap-to-char
#+end_src

* Custom key chords

Basic key chords are below. Mode-specific key chords are defined in each mode.

Use acronyms for naming key chords, or leave a comment otherwise. For directions, use VIM keys.

#+begin_src emacs-lisp
  ;; buffer
  (key-chord-define-global "bl"     'switch-to-buffer)  ; buffer list.
  (key-chord-define-global "bs"     'save-buffer)
  (key-chord-define-global "zi"     'text-scale-increase)  ; zoom in.
  (key-chord-define-global "zo"     'text-scale-decrease)  ; zoom out.
  (key-chord-define-global "wr"     'visual-line-mode)  ; word wrap.
  ;; file
  (key-chord-define-global "fb"     'find-file)  ; find buffer.
  (key-chord-define-global "kb"     'kill-buffer)
  ;; window
  (key-chord-define-global "ow"     'other-window)
  ;; move
  (key-chord-define-global "gw"     'forward-word)  ; go + VIM key.
  (key-chord-define-global "gb"     'backward-word)
  (key-chord-define-global "gh"     'backward-char)
  (key-chord-define-global "gj"     'forward-line)
  (key-chord-define-global "gk"     'previous-line)
  (key-chord-define-global "gl"     'forward-char)
  (key-chord-define-global "gp"     'goto-last-change)
  ;; scrolling
  (key-chord-define-global "if"     'isearch-forward-regexp)
  (key-chord-define-global "ib"     'isearch-backward-regexp)
  ;; search
  (key-chord-define-global "sj"     'evil-scroll-page-down)  ; scroll + VIM key.
  (key-chord-define-global "sk"     'evil-scroll-page-up)
  ;; edit
  (key-chord-define-global "ud"     'undo)
  (key-chord-define-global "ur"     'undo-redo)
  (key-chord-define-global "cl"     'copy-rest-line)
  (key-chord-define-global "yl"     'yank-new-line)
  (key-chord-define-global "dl"     'duplicate-line)
  ;; spell check
  (key-chord-define-global "dl"     'duplicate-line)
  ;; shell
  (key-chord-define-global "es"     'eshell)
  ;; others
  (key-chord-define-global "fj"     'evil-ret-and-indent)
  (key-chord-define-global "ej"     'escape-all)
  ;; emacs
  (key-chord-define-global "mx"     'execute-extended-command)
#+end_src

* Custom functions

Open this configuration.

#+begin_src emacs-lisp
  (defun find-config ()
    (interactive)
    (find-file (expand-file-name "custom-init.org" user-emacs-directory)))
#+end_src

Reload this configuration on the fly.

#+begin_src emacs-lisp
  (defun reload-config()
    (interactive)
    (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src

Copy the rest of the line, starting from current position.

#+begin_src emacs-lisp
  (defun copy-rest-line ()
    (interactive)
    (kill-line)
    (yank)
  )
#+end_src

Paste to new line next to the current position.

#+begin_src emacs-lisp
  (defun yank-new-line ()
    (interactive)
    (open-line 1)
    (next-line 1)
    (yank)
  )
#+end_src

Duplicate current line.

#+begin_src emacs-lisp
  (defun duplicate-line ()
    (interactive)
    (move-beginning-of-line 1)
    (copy-rest-line)
    (yank-new-line)
  )
#+end_src

Move the cursor to the first non-whitespace character of the line. If the cursor is already there, then move it to the beginning of the line.

#+begin_src emacs-lisp
  (defun king/smarter-beginning-of-line ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
        (beginning-of-line)))

  (global-set-key (kbd "C-a") 'king/smarter-beginning-of-line)
#+end_src

Create a new line above or below the current one.

#+begin_src emacs-lisp
  (defun king/create-line-above ()
    (interactive)
    (beginning-of-line)
    (newline)
    (previous-line)
    (indent-for-tab-command))

  (defun king/create-line-below ()
    (interactive)
    (end-of-line)
    (newline-and-indent))

  (global-set-key (kbd "<C-S-return>") 'king/create-line-above)
  (global-set-key (kbd "<S-return>")   'king/create-line-below)
#+end_src

When splitting a window, switch to the new window.

#+begin_src emacs-lisp
  (defun king/split-window-below-and-switch ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun king/split-window-right-and-switch ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'king/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'king/split-window-right-and-switch)
#+end_src

Mark deleted e-mail messages as read.

#+begin_src emacs-lisp
  (defun king/mu4e-mark-gmail-trash-as-read (&optional _)
    (let* ((cmd "mu find maildir:/trash/ flag:unread --format=sexp 2>/dev/null")
           (res (concat "(list" (shell-command-to-string cmd) ")"))
           (msgs (car (read-from-string res))))
      (unless (equal '(list) msgs)
        (dolist (msg msgs)
          (when-let ((docid (mu4e-message-field msg :docid)))
            (unless (= docid 0)
              (mu4e~proc-move docid nil "+S-u-N")))))))

  (advice-add 'mu4e :before #'king/mu4e-mark-gmail-trash-as-read)
#+end_src

Resize large images in e-mail messages to fit the window.

#+begin_src emacs-lisp
  (defun mu4e-display-image (imgpath &optional maxwidth maxheight)
    (let ((img (create-image imgpath nil nil
                             :max-width maxwidth :max-height maxheight)))
      (save-excursion
        (insert "\n")
        (let ((size (image-size img)))
          (insert-char ?\n (max 0 (round (- (window-height) (or maxheight (cdr size)) 1) 2)))
          (insert-char ?\. (max 0 (round (- (window-width)  (or maxwidth (car size))) 2)))
          (insert-image img)))))
#+end_src

* Org mode

#+begin_quote
Org mode is a a to-do, agenda, project planner, literate programming, note-taking (and more!) application. It is widely considered the best text-based organizer ever — a feat only surpassed by the fact that people switch to Emacs just to use it.

— Mickey Petersen, author of "Mastering Emacs"
#+end_quote

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :hook (org-mode . (lambda ()
                        (org-indent-mode)
                        (variable-pitch-mode -1)
                        (display-line-numbers-mode -1)
                        (set-input-method "custom-input-method")))
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :custom
    (org-ellipsis " ▾")
    (org-tags-column 0)
    (org-log-done 'time)
    (org-startup-folded t)
    (org-log-into-drawer t)
    (org-clock-into-drawer t)
    (org-image-actual-width nil)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-hide-emphasis-markers t)
    (org-directory "~/orgfiles")
    (org-export-with-tags nil)
    (org-export-headline-levels 5)
    (org-export-backends '(html latex))
    (org-startup-with-inline-images t)
    (org-modules '(org-crypt org-habit))
    (org-tag-alist '(("crypt"    . ?c)
                     ("temp"     . ?t)
                     ("home"     . ?h)
                     ("work"     . ?w)
                     ("urgent"   . ?u)
                     ("export"   . ?e)
                     ("noexport" . ?n)
                     ("expired"  . ?x)
                     ("TOC"      . ?T)))
    (org-tags-sort-function 'org-string-collate-lessp)
    (org-tags-exclude-from-inheritance '("crypt"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "WAITING(w)"
                                   "NEXT(n)"
                                   "POSTPONED(e)"
                                   "SOMEDAY(o)"
                                   "PROJECT(p)" "|"
                                   "DONE(d)"
                                   "CANCELLED(c)")
                         (sequence "LEARN(l)"
                                   "REVIEW(r)" "|"
                                   "DONE(d)"
                                   "CANCELLED(c)")))
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 4)))))

  (use-package org-faces
    :ensure nil
    :custom-face
    (org-table ((nil (:inherit fixed-pitch))))
    (org-block ((nil (:inherit fixed-pitch :foreground nil))))
    (org-code  ((nil (:inherit (shadow fixed-pitch)))))
    :custom
    (org-todo-keyword-faces
     '(("TODO"      . (:foreground "red2"         :weight bold))
       ("STARTED"   . (:foreground "darkcyan"     :weight bold))
       ("WAITING"   . (:foreground "slateblue"    :weight bold))
       ("NEXT"      . (:foreground "violetred"    :weight bold))
       ("POSTPONED" . (:foreground "darkorchid"   :weight bold))
       ("SOMEDAY"   . (:foreground "chocolate"    :weight bold))
       ("PROJECT"   . (:foreground "royalblue"    :weight bold))
       ("LEARN"     . (:foreground "deepskyblue3" :weight bold))
       ("REVIEW"    . (:foreground "coral3"       :weight bold))
       ("DONE"      . (:foreground "limegreen"    :weight bold))
       ("CANCELLED" . (:foreground "slategray"    :weight bold)))))

  ;; Replace list hyphens with bullets
  (font-lock-add-keywords
   'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :custom
    (org-agenda-files
     (seq-filter #'file-exists-p
                 (mapcar #'(lambda (file) (file-name-concat org-directory file))
                         '("bookmarks.org"
                           "calendar.org"
                           "contacts.org"
                           "work.org"
                           "misc.org"
                           "daily.org"
                           "notes.org"
                           "tasks.org"
                           "people.org"
                           "refile.org"
                           "habits.org"
                           "elfeed.org"
                           "english.org"
                           "spanish.org"
                           "private.org"))))
    (org-agenda-include-diary t)
    (org-habit-graph-column 80)
    (org-habit-today-glyph ?⧖)
    (org-habit-completed-glyph ?✓))
#+end_src

** Appear

A package to toggle visibility of hidden Org elements.

#+begin_src emacs-lisp
  (use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src

** Bullets

Prettify Org headings by replacing leading stars with UTF-8 bullets.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil)

#+end_src

** Contacts

A contact manager for Org mode.

#+begin_src emacs-lisp
  (use-package org-contacts
    :after org
    :custom
    (org-contacts-files (list (concat org-directory "/contacts.org"))))
#+end_src

** Crypt

Encrypt and decrypt entries in Org mode.

#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :after org
    :custom
    ;; Public key
    (org-crypt-key "182BC820D271E36BE128AD05D1F775A0A21D3351")
    :config
    (org-crypt-use-before-save-magic))
#+end_src

** Denote

A simple note-taking tool, based on the idea that notes should follow a predictable and descriptive file-naming scheme.

#+begin_src emacs-lisp
  (use-package denote
    :after org
    :bind ("C-c d" . denote)
    :hook (dired-mode . denote-dired-mode)
    :custom
    (denote-sort-keywords t)
    (denote-allow-multi-word-keywords nil)
    (denote-directory (concat org-directory "/")))
#+end_src

** Export

A LaTeX back-end for the Org export engine.

Dependencies:

- ~sudo dnf install sil-charis-fonts~
- ~sudo dnf install texlive-scheme-basic~
- ~sudo dnf install tex-wrapfig tex-ulem tex-capt-of tex-nopageno~

#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure nil
    :after org
    :custom
    (org-latex-compiler "xelatex")
    :config
    (add-to-list
     'org-latex-classes
     '("org-plain-latex"
       "\\documentclass{article}
       [NO-DEFAULT-PACKAGES]
       [PACKAGES]
       [EXTRA]"
       ("\\section{%s}"       . "\\section*{%s}")
       ("\\subsection{%s}"    . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}"     . "\\paragraph*{%s}")
       ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))))
#+end_src

** QL

A library for searching Org entries with a query language based on S (Lisp) expressions.

#+begin_src emacs-lisp
  (use-package org-ql
    :defer t)
#+end_src

** Toc

A package to automatically generate a table of contents based on the structure of the document.

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable)
    :custom
    (toc-org-max-depth 3))
#+end_src
